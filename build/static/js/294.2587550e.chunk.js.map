{"version":3,"file":"static/js/294.2587550e.chunk.js","mappings":"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","sources":["models/Splendor.ts","constants/utils.ts","constants/allCards.ts","utils/collection.ts","constants/allNobles.ts","utils/memory.ts","utils/splendor.ts","utils/minimax.ts","webWorkers/getNextAction.worker.ts"],"sourcesContent":["export enum Color {\n  White = 'white',\n  Blue = 'blue',\n  Green = 'green',\n  Red = 'red',\n  Black = 'black',\n  Yellow = 'yellow',\n};\n\nexport type CoinSet = Record<Color, number>;\n\nexport type Card = {\n  id: number;\n  color: Color;\n  cost: CoinSet;\n  points: number;\n  tier: 'tier1' | 'tier2' | 'tier3';\n};\n\nexport type Noble = {\n  id: number;\n  points: number;\n  cards: Record<Color, number>;\n};\n\nexport type Player = {\n  id: number;\n  coins: CoinSet;\n  bought: Card[];\n  reserved: Card[];\n  nobles: Noble[];\n  points: number;\n};\n\nexport type Game = {\n  players: Player[];\n  deck: {\n    tier1: Card[];\n    tier2: Card[];\n    tier3: Card[];\n  };\n  table: Card[];\n  nobles: Noble[];\n  coins: Record<Color, number>;\n  turn: number; // Player id\n};\n\nexport type Action = {\n  type: 'buy' | 'reserve' | 'buyReserve';\n  coinCost: CoinSet;\n  card: Card;\n} | { type: 'takeCoins', coinCost: CoinSet, card: null };\n","import { Color } from \"../models/Splendor\";\n\nexport const getCost = (white: number, blue: number, green: number, red: number, black: number, yellow: number = 0): Record<Color, number> => ({\n  white,\n  blue,\n  green,\n  red,\n  black,\n  yellow,\n});\n\nexport const EMPTY_COINS = getCost(0, 0, 0, 0, 0, 0);\n","import _ from \"lodash\";\nimport { Card, Color } from \"../models/Splendor\";\nimport { getCost } from \"./utils\";\n\nexport const ALL_CARDS: Card[] = [\n  {\n    id: 0,\n    color: Color.White,\n    cost: getCost(0, 1, 1, 1, 1),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 1,\n    color: Color.White,\n    cost: getCost(0, 1, 2, 1, 1),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 2,\n    color: Color.White,\n    cost: getCost(0, 2, 2, 0, 1),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 3,\n    color: Color.White,\n    cost: getCost(3, 1, 0, 0, 1),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 4,\n    color: Color.White,\n    cost: getCost(0, 0, 0, 2, 1),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 5,\n    color: Color.White,\n    cost: getCost(0, 2, 0, 0, 2),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 6,\n    color: Color.White,\n    cost: getCost(0, 3, 0, 0, 0),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 7,\n    color: Color.White,\n    cost: getCost(0, 0, 4, 0, 0),\n    points: 1,\n    tier: 'tier1',\n  },\n  {\n    id: 8,\n    color: Color.Black,\n    cost: getCost(1, 1, 1, 1, 0),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 9,\n    color: Color.Black,\n    cost: getCost(1, 2, 1, 1, 0),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 10,\n    color: Color.Black,\n    cost: getCost(2, 2, 0, 1, 0),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 11,\n    color: Color.Black,\n    cost: getCost(0, 0, 1, 3, 1),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 12,\n    color: Color.Black,\n    cost: getCost(0, 0, 2, 1, 0),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 13,\n    color: Color.Black,\n    cost: getCost(2, 0, 2, 0, 0),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 14,\n    color: Color.Black,\n    cost: getCost(0, 0, 3, 0, 0),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 15,\n    color: Color.Black,\n    cost: getCost(0, 4, 0, 0, 0),\n    points: 1,\n    tier: 'tier1',\n  },\n  {\n    id: 16,\n    color: Color.Blue,\n    cost: getCost(1, 0, 1, 1, 1),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 17,\n    color: Color.Blue,\n    cost: getCost(1, 0, 1, 2, 1),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 18,\n    color: Color.Blue,\n    cost: getCost(1, 0, 2, 2, 0),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 19,\n    color: Color.Blue,\n    cost: getCost(0, 1, 3, 1, 0),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 20,\n    color: Color.Blue,\n    cost: getCost(1, 0, 0, 0, 2),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 21,\n    color: Color.Blue,\n    cost: getCost(0, 0, 2, 0, 2),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 22,\n    color: Color.Blue,\n    cost: getCost(0, 0, 0, 0, 3),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 23,\n    color: Color.Blue,\n    cost: getCost(0, 0, 0, 4, 0),\n    points: 1,\n    tier: 'tier1',\n  },\n  {\n    id: 24,\n    color: Color.Green,\n    cost: getCost(1, 1, 0, 1, 1),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 25,\n    color: Color.Green,\n    cost: getCost(1, 1, 0, 1, 2),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 26,\n    color: Color.Green,\n    cost: getCost(0, 1, 0, 2, 2),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 27,\n    color: Color.Green,\n    cost: getCost(1, 3, 1, 0, 0),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 28,\n    color: Color.Green,\n    cost: getCost(2, 1, 0, 0, 0),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 29,\n    color: Color.Green,\n    cost: getCost(0, 2, 0, 2, 0),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 30,\n    color: Color.Green,\n    cost: getCost(0, 0, 0, 3, 0),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 31,\n    color: Color.Green,\n    cost: getCost(0, 0, 0, 0, 4),\n    points: 1,\n    tier: 'tier1',\n  },\n  {\n    id: 32,\n    color: Color.Red,\n    cost: getCost(1, 1, 1, 0, 1),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 33,\n    color: Color.Red,\n    cost: getCost(2, 1, 1, 0, 1),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 34,\n    color: Color.Red,\n    cost: getCost(2, 0, 1, 0, 2),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 35,\n    color: Color.Red,\n    cost: getCost(1, 0, 0, 1, 3),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 36,\n    color: Color.Red,\n    cost: getCost(0, 2, 1, 0, 0),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 37,\n    color: Color.Red,\n    cost: getCost(2, 0, 0, 2, 0),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 38,\n    color: Color.Red,\n    cost: getCost(3, 0, 0, 0, 0),\n    points: 0,\n    tier: 'tier1',\n  },\n  {\n    id: 39,\n    color: Color.Red,\n    cost: getCost(4, 0, 0, 0, 0),\n    points: 1,\n    tier: 'tier1',\n  },\n  {\n    id: 40,\n    color: Color.Black,\n    cost: getCost(3, 2, 2, 0, 0),\n    points: 1,\n    tier: 'tier2',\n  },\n  {\n    id: 41,\n    color: Color.Black,\n    cost: getCost(3, 0, 3, 0, 2),\n    points: 1,\n    tier: 'tier2',\n  },\n  {\n    id: 42,\n    color: Color.Black,\n    cost: getCost(0, 1, 4, 2, 0),\n    points: 2,\n    tier: 'tier2',\n  },\n  {\n    id: 43,\n    color: Color.Black,\n    cost: getCost(0, 0, 5, 3, 0),\n    points: 2,\n    tier: 'tier2',\n  },\n  {\n    id: 44,\n    color: Color.Black,\n    cost: getCost(5, 0, 0, 0, 0),\n    points: 2,\n    tier: 'tier2',\n  },\n  {\n    id: 45,\n    color: Color.Black,\n    cost: getCost(0, 0, 0, 0, 6),\n    points: 3,\n    tier: 'tier2',\n  },\n  {\n    id: 46,\n    color: Color.Blue,\n    cost: getCost(0, 2, 2, 3, 0),\n    points: 1,\n    tier: 'tier2',\n  },\n  {\n    id: 47,\n    color: Color.Blue,\n    cost: getCost(0, 2, 3, 0, 3),\n    points: 1,\n    tier: 'tier2',\n  },\n  {\n    id: 48,\n    color: Color.Blue,\n    cost: getCost(5, 3, 0, 0, 0),\n    points: 2,\n    tier: 'tier2',\n  },\n  {\n    id: 49,\n    color: Color.Blue,\n    cost: getCost(2, 0, 0, 1, 4),\n    points: 2,\n    tier: 'tier2',\n  },\n  {\n    id: 50,\n    color: Color.Blue,\n    cost: getCost(0, 5, 0, 0, 0),\n    points: 2,\n    tier: 'tier2',\n  },\n  {\n    id: 51,\n    color: Color.Blue,\n    cost: getCost(0, 6, 0, 0, 0),\n    points: 3,\n    tier: 'tier2',\n  },\n  {\n    id: 52,\n    color: Color.White,\n    cost: getCost(0, 0, 3, 2, 2),\n    points: 1,\n    tier: 'tier2',\n  },\n  {\n    id: 53,\n    color: Color.White,\n    cost: getCost(2, 3, 0, 3, 0),\n    points: 1,\n    tier: 'tier2',\n  },\n  {\n    id: 54,\n    color: Color.White,\n    cost: getCost(0, 0, 1, 4, 2),\n    points: 2,\n    tier: 'tier2',\n  },\n  {\n    id: 55,\n    color: Color.White,\n    cost: getCost(0, 0, 0, 5, 3),\n    points: 2,\n    tier: 'tier2',\n  },\n  {\n    id: 56,\n    color: Color.White,\n    cost: getCost(0, 0, 0, 5, 0),\n    points: 2,\n    tier: 'tier2',\n  },\n  {\n    id: 57,\n    color: Color.White,\n    cost: getCost(6, 0, 0, 0, 0),\n    points: 3,\n    tier: 'tier2',\n  },\n  {\n    id: 58,\n    color: Color.Green,\n    cost: getCost(3, 0, 2, 3, 0),\n    points: 1,\n    tier: 'tier2',\n  },\n  {\n    id: 59,\n    color: Color.Green,\n    cost: getCost(2, 3, 0, 0, 2),\n    points: 1,\n    tier: 'tier2',\n  },\n  {\n    id: 60,\n    color: Color.Green,\n    cost: getCost(4, 2, 0, 0, 1),\n    points: 2,\n    tier: 'tier2',\n  },\n  {\n    id: 61,\n    color: Color.Green,\n    cost: getCost(0, 5, 3, 0, 0),\n    points: 2,\n    tier: 'tier2',\n  },\n  {\n    id: 62,\n    color: Color.Green,\n    cost: getCost(0, 0, 5, 0, 0),\n    points: 2,\n    tier: 'tier2',\n  },\n  {\n    id: 63,\n    color: Color.Green,\n    cost: getCost(0, 0, 6, 0, 0),\n    points: 3,\n    tier: 'tier2',\n  },\n  {\n    id: 64,\n    color: Color.Red,\n    cost: getCost(2, 0, 0, 2, 3),\n    points: 1,\n    tier: 'tier2',\n  },\n  {\n    id: 65,\n    color: Color.Red,\n    cost: getCost(0, 3, 0, 2, 3),\n    points: 1,\n    tier: 'tier2',\n  },\n  {\n    id: 66,\n    color: Color.Red,\n    cost: getCost(1, 4, 2, 0, 0),\n    points: 2,\n    tier: 'tier2',\n  },\n  {\n    id: 67,\n    color: Color.Red,\n    cost: getCost(3, 0, 0, 0, 5),\n    points: 2,\n    tier: 'tier2',\n  },\n  {\n    id: 68,\n    color: Color.Red,\n    cost: getCost(0, 0, 0, 0, 5),\n    points: 2,\n    tier: 'tier2',\n  },\n  {\n    id: 69,\n    color: Color.Red,\n    cost: getCost(0, 0, 0, 6, 0),\n    points: 3,\n    tier: 'tier2',\n  },\n  {\n    id: 70,\n    color: Color.Black,\n    cost: getCost(3, 3, 5, 3, 0),\n    points: 3,\n    tier: 'tier3',\n  },\n  {\n    id: 71,\n    color: Color.Black,\n    cost: getCost(0, 0, 0, 7, 0),\n    points: 4,\n    tier: 'tier3',\n  },\n  {\n    id: 72,\n    color: Color.Black,\n    cost: getCost(0, 0, 3, 6, 3),\n    points: 4,\n    tier: 'tier3',\n  },\n  {\n    id: 73,\n    color: Color.Black,\n    cost: getCost(0, 0, 0, 7, 3),\n    points: 5,\n    tier: 'tier3',\n  },\n  {\n    id: 74,\n    color: Color.Blue,\n    cost: getCost(3, 0, 3, 3, 5),\n    points: 3,\n    tier: 'tier3',\n  },\n  {\n    id: 75,\n    color: Color.Blue,\n    cost: getCost(7, 0, 0, 0, 0),\n    points: 4,\n    tier: 'tier3',\n  },\n  {\n    id: 76,\n    color: Color.Blue,\n    cost: getCost(6, 3, 0, 0, 3),\n    points: 4,\n    tier: 'tier3',\n  },\n  {\n    id: 77,\n    color: Color.Blue,\n    cost: getCost(7, 3, 0, 0, 0),\n    points: 5,\n    tier: 'tier3',\n  },\n  {\n    id: 78,\n    color: Color.White,\n    cost: getCost(0, 3, 3, 5, 3),\n    points: 3,\n    tier: 'tier3',\n  },\n  {\n    id: 79,\n    color: Color.White,\n    cost: getCost(0, 0, 0, 0, 7),\n    points: 4,\n    tier: 'tier3',\n  },\n  {\n    id: 80,\n    color: Color.White,\n    cost: getCost(3, 0, 0, 3, 6),\n    points: 4,\n    tier: 'tier3',\n  },\n  {\n    id: 81,\n    color: Color.White,\n    cost: getCost(3, 0, 0, 0, 7),\n    points: 5,\n    tier: 'tier3',\n  },\n  {\n    id: 82,\n    color: Color.Green,\n    cost: getCost(5, 3, 0, 3, 3),\n    points: 3,\n    tier: 'tier3',\n  },\n  {\n    id: 83,\n    color: Color.Green,\n    cost: getCost(0, 7, 0, 0, 0),\n    points: 4,\n    tier: 'tier3',\n  },\n  {\n    id: 84,\n    color: Color.Green,\n    cost: getCost(3, 6, 3, 0, 0),\n    points: 4,\n    tier: 'tier3',\n  },\n  {\n    id: 85,\n    color: Color.Green,\n    cost: getCost(0, 7, 3, 0, 0),\n    points: 5,\n    tier: 'tier3',\n  },\n  {\n    id: 86,\n    color: Color.Red,\n    cost: getCost(3, 5, 3, 0, 3),\n    points: 3,\n    tier: 'tier3',\n  },\n  {\n    id: 87,\n    color: Color.Red,\n    cost: getCost(0, 0, 7, 0, 0),\n    points: 4,\n    tier: 'tier3',\n  },\n  {\n    id: 88,\n    color: Color.Red,\n    cost: getCost(0, 3, 6, 3, 0),\n    points: 4,\n    tier: 'tier3',\n  },\n  {\n    id: 89,\n    color: Color.Red,\n    cost: getCost(0, 0, 7, 3, 0),\n    points: 5,\n    tier: 'tier3',\n  },\n];\n\nexport const DECK = _.groupBy(ALL_CARDS, 'tier') as unknown as Record<'tier1' | 'tier2' | 'tier3', Card[]>;\n","import _, { ListIterateeCustom, ObjectIterateeCustom } from \"lodash\";\n\ntype ICount = {\n  <T>(arr: T[] | null | undefined, countIf: ListIterateeCustom<T, boolean>): number;\n  <T extends object>(obj: T | null | undefined, countIf: ObjectIterateeCustom<T, boolean>): number;\n};\n\nexport const count: ICount = (coll: any, countIf: any) => {\n  return _.reduce(coll, (agg, value, keyIndex, c) => {\n    return countIf(value, keyIndex, c) ? agg + 1 : agg;\n  }, 0);\n};\n","import { Noble } from \"../models/Splendor\";\nimport { getCost } from \"./utils\";\n\nexport const ALL_NOBLES: Noble[] = [\n  {\n    id: 0,\n    points: 3,\n    cards: getCost(0, 3, 3, 3, 0),\n  },\n  {\n    id: 1,\n    points: 3,\n    cards: getCost(3, 3, 0, 0, 3),\n  },\n  {\n    id: 2,\n    points: 3,\n    cards: getCost(4, 0, 0, 0, 4),\n  },\n  {\n    id: 3,\n    points: 3,\n    cards: getCost(4, 4, 0, 0, 0),\n  },\n  {\n    id: 4,\n    points: 3,\n    cards: getCost(0, 4, 4, 0, 0),\n  },\n  {\n    id: 5,\n    points: 3,\n    cards: getCost(3, 3, 3, 0, 0),\n  },\n  {\n    id: 6,\n    points: 3,\n    cards: getCost(3, 0, 0, 3, 3),\n  },\n  {\n    id: 7,\n    points: 3,\n    cards: getCost(0, 0, 3, 3, 3),\n  },\n  {\n    id: 8,\n    points: 3,\n    cards: getCost(0, 0, 0, 4, 4),\n  },\n  {\n    id: 9,\n    points: 3,\n    cards: getCost(0, 0, 4, 4, 0),\n  },\n];","import { EMPTY_COINS } from \"../constants/utils\";\nimport { Action, Card, CoinSet } from \"../models/Splendor\";\n\nconst makePool = <T extends object, P extends Array<any> = any[]>(createNew: (...args: P) => T, cleanNew: (x: T) => T = (x) => x) => {\n  const pool = [] as T[];\n  const numUsedAtDepth = [] as number[];\n  return {\n\n    start() {\n      numUsedAtDepth.push(pool.length);\n    },\n\n    get(...args: P) {\n      const currIndex = numUsedAtDepth[numUsedAtDepth.length - 1];\n      if (currIndex > pool.length) {\n        console.error(`Pool error: get ${currIndex} / ${pool.length}`);\n        return createNew(...args);\n      }\n      if (currIndex === pool.length) {\n        pool.push(createNew(...args));\n      }\n      numUsedAtDepth[numUsedAtDepth.length - 1]++;\n      return cleanNew(pool[currIndex]);\n    },\n\n    end() {\n      numUsedAtDepth.pop();\n    },\n\n  };\n};\n\nexport const arrPool = makePool(() => [] as any[], (x) => {\n  x.length = 0;\n  return x;\n});\n\n// Keep the object entries for now.  It's the user's responsibility to clear fields or iterate responsibly.\nexport const objPool = makePool(() => ({}));\n\nexport const actionPool = makePool((type: Action['type'] = 'takeCoins', coinCost: CoinSet = { ...EMPTY_COINS }, card: Card | null = null) => ({ type, coinCost, card } as Action));\n\nexport const coinSetPool = makePool(() => ({ ...EMPTY_COINS } as CoinSet));\n","import _ from 'lodash';\nimport produce from 'immer';\nimport { DECK } from '../constants/allCards';\nimport { ALL_NOBLES } from '../constants/allNobles';\nimport { getCost, EMPTY_COINS } from '../constants/utils';\nimport { Action, Card, CoinSet, Color, Game, Player } from \"../models/Splendor\";\nimport { count } from './collection';\nimport { actionPool, arrPool } from './memory';\nimport { genMaxN, genMinimaxAB, genProbablyBestMove } from './minimax';\n\nexport const getNumCoins = (coins: Record<Color, number>) => _.reduce(coins, (sum, num) => sum + num, 0);\n\n/** Put this inside an arrPool */\nconst generateThreeCoinPermutations = (coins: Record<Color, number>, output: Color[][] = []): Color[][] => {\n  const gatherThreeCoins = (currentCoins: Color[]) => {\n    if (currentCoins.length === 3) {\n      output.push(currentCoins);\n      return output;\n    }\n    _.forEach(coins, (value, color) => {\n      if (color === currentCoins[0] || color === currentCoins[1]) return;\n      if (value > 0 && color !== Color.Yellow) {\n        // This is used inside the start-end pool of getPossibleActions.\n        const nextCoins = arrPool.get() as Color[];\n        nextCoins.push(...currentCoins, color as Color);\n        gatherThreeCoins(nextCoins);\n      }\n    });\n  };\n\n  gatherThreeCoins(arrPool.get());\n  return output;\n};\n\nexport const canAffordCard = (player: Player, card: Card, output: CoinSet = {} as CoinSet): CoinSet | null => {\n  _.forEach(card.cost, (coinCost, color) => {\n    output[color as Color] = Math.max(0, coinCost - count(player.bought, card => card.color === color as Color));\n  });\n  const canAfford = _.every(output, (coinsNeeded, color) => {\n    if (player.coins[color as Color] >= coinsNeeded) return true;\n    const yellowCoinsNeeded = coinsNeeded - player.coins[color as Color];\n    const yellowCoinsAvailable = player.coins[Color.Yellow] - output[Color.Yellow];\n    if (yellowCoinsAvailable >= yellowCoinsNeeded) {\n      output[color as Color] = player.coins[color as Color];\n      output[Color.Yellow] += yellowCoinsNeeded;\n      return true;\n    }\n    return false;\n  });\n  return canAfford ? output : null;\n}\n\n/** Put this inside an actionPool */\nexport const getBuyActions = (game: Game, player: Player, output: Action[] = []) => {\n  const gatherBuyActions = (type: 'buy' | 'buyReserve') => (card: Card) => {\n    const action = actionPool.get();\n    const payableCost = canAffordCard(player, card, action.coinCost);\n    if (payableCost) {\n      action.type = type;\n      action.card = card;\n      output.push(action);\n    }\n  };\n  game.table.forEach(gatherBuyActions('buy'))\n  player.reserved.forEach(gatherBuyActions('buyReserve'));\n  return output;\n};\n\n/** Put this inside an actionPool */\nexport const getReserveActions = (game: Game, player: Player, output: Action[] = []) => {\n  if (player.reserved.length < 3) {\n    const yellowCost = game.coins[Color.Yellow] > 0 ? -1 : 0;\n    game.table.forEach(card => {\n      const action = actionPool.get();\n      action.type = 'reserve';\n      action.coinCost[Color.Yellow] = yellowCost;\n      action.card = card;\n      output.push(action);\n    });\n  }\n  return output;\n};\n\n/** Put inside actionPool */\nexport const getPossibleActions = (game: Game, output: Action[] = []) => {\n  arrPool.start();\n  const playerIndex = getPlayerIndex(game);\n  const player = game.players[playerIndex];\n  /** Take Coins */\n  const lessThanThreeStacks = _.reduce(game.coins, (agg, value, color) => agg += (value > 0 && color !== Color.Yellow ? 1 : 0), 0) < 3;\n  const threeCoinPermutations: Color[][] = arrPool.get();\n  if (lessThanThreeStacks) {\n    const onlyCoinsToTake = _.reduce(game.coins, (agg, value, color) => {\n      if (value > 0 && color !== Color.Yellow) agg.push(color as Color);\n      return agg;\n    }, arrPool.get() as Color[]);\n    if (onlyCoinsToTake.length) threeCoinPermutations.push(onlyCoinsToTake);\n  } else {\n    generateThreeCoinPermutations(game.coins, threeCoinPermutations);\n  }\n  threeCoinPermutations.forEach((permutation) => {\n    const action = actionPool.get('takeCoins');\n    action.card = null;\n    permutation.forEach((color) => {\n      action.coinCost[color] = -1;\n    });\n    output.push(action);\n  });\n\n  _.forEach(game.coins, (value, color) => {\n    if (value >= 4 && color !== Color.Yellow) {\n      const action = actionPool.get('takeCoins');\n      action.card = null;\n      action.coinCost[color as Color] = -2;\n      output.push(action);\n    }\n  });\n\n  /** Buy Or Reserve */\n  getBuyActions(game, player, output);\n  getReserveActions(game, player, output);\n\n  arrPool.end();\n  return output;\n};\n\nexport const forSomePossibleActions = (game: Game, callback: (action: Action) => any) => {\n  actionPool.start();\n  const actions = getPossibleActions(game);\n  const result = actions.some(callback);\n  actionPool.end();\n  return result;\n};\n\nconst coinsExchange = (game: Game, player: Player, action: Action) => {\n  _.assignWith(player.coins, action.coinCost, (playerCoins, actionCost) => playerCoins - actionCost);\n  _.assignWith(game.coins, action.coinCost, (gameCoins, actionCost) => gameCoins + actionCost);\n};\n\nconst getNullCard = (tier: 'tier1' | 'tier2' | 'tier3'): Card => {\n  return {\n    id: -1,\n    color: Color.White,\n    cost: getCost(0, 0, 0, 0, 0),\n    points: 0,\n    tier,\n  };\n};\n\nconst drawCardFromDeck = (game: Game, tier: 'tier1' | 'tier2' | 'tier3', removeCard?: Card) => {\n  const cardIndex = removeCard ? _.findIndex(game.table, (c) => c.id === removeCard.id) : game.table.length;\n  const nextCard = game.deck[tier].pop() || getNullCard(tier);\n  game.table.splice(cardIndex, removeCard ? 1 : 0, nextCard);\n};\n\nconst takeCardFromTable = (game: Game, card: Card) => drawCardFromDeck(game, card.tier, card);\n\nexport const getAffordableNobles = (game: Game, player: Player) => game.nobles.filter((noble) => {\n  return _.every(noble.cards, (value, color) => {\n    return count(player.bought, (card) => card.color === color as Color) >= value;\n  });\n});\n\nconst maybeAcquireNoble = (game: Game, player: Player) => {\n  const firstAffordableNoble = getAffordableNobles(game, player)[0];\n  // TODO(jkarges): Decide between multiple nobles.\n  if (!firstAffordableNoble) return;\n  _.remove(game.nobles, firstAffordableNoble);\n  player.nobles.push(firstAffordableNoble);\n  player.points += firstAffordableNoble.points;\n};\n\nexport const takeAction = produce((game: Game, action: Action) => {\n  const playerIndex = game.turn % game.players.length;\n  const player = game.players[playerIndex];\n  coinsExchange(game, player, action);\n  game.turn++;\n  switch (action.type) {\n    case 'buy':\n      player.points += action.card.points;\n      player.bought.push(action.card);\n      takeCardFromTable(game, action.card);\n      maybeAcquireNoble(game, player);\n      break;\n    case 'buyReserve':\n      player.points += action.card.points;\n      player.bought.push(action.card);\n      _.remove(player.reserved, (card) => card.id === action.card.id);\n      maybeAcquireNoble(game, player);\n      break;\n    case 'reserve':\n      player.reserved.push(action.card);\n      takeCardFromTable(game, action.card);\n      break;\n    case 'takeCoins':\n    default:\n      break;\n  }\n  return game;\n});\n\nexport const setupGame = (numPlayers: number): Game => {\n  const shuffledDeck = _.mapValues(DECK, (cards) => _.shuffle(cards));\n\n  const players = _.times(numPlayers, (index) => ({\n    id: index,\n    coins: EMPTY_COINS,\n    bought: [],\n    reserved: [],\n    nobles: [],\n    points: 0,\n  }))\n\n  const startingCoinsPerStack = numPlayers <= 2 ? 4 : numPlayers <= 3 ? 5 : 7;\n\n  const game: Game = {\n    players,\n    deck: shuffledDeck,\n    table: [],\n    nobles: _.shuffle(ALL_NOBLES).slice(0, numPlayers + 1),\n    coins: getCost(startingCoinsPerStack, startingCoinsPerStack, startingCoinsPerStack, startingCoinsPerStack, startingCoinsPerStack, 5),\n    turn: 0,\n  };\n\n  (['tier1', 'tier2', 'tier3'] as const).forEach((tier) => {\n    _.times(4, () => drawCardFromDeck(game, tier));\n  });\n\n  return game;\n};\n\nconst playerValue = (game: Game, player: Player): number => {\n  const points = player.points;\n  const bought = player.bought.length;\n  const gainCards = getBuyActions(game, player).length;\n  const coins = Math.min(10, _.reduce(player.coins, (sumCoins, numCoins) => sumCoins + numCoins, 0));\n  const valueString = [points, bought, gainCards, coins].map(x => x.toString().padStart(2, '0')).join('');\n  return +valueString;\n};\n\nconst gameValue = (game: Game) => {\n  const playerIndex = getPlayerIndex(game);\n  return playerValue(game, game.players[playerIndex]) - game.players.reduce((maxValue, player, i) => {\n    return i === playerIndex ? maxValue : Math.max(maxValue, playerValue(game, player));\n  }, -Infinity);\n};\n\nconst gameValueForAllPlayers = (game: Game) => {\n  arrPool.start();\n  const playerValues = arrPool.get();\n  game.players.forEach((player) => playerValues.push(playerValue(game, player)));\n  const [first, second] = playerValues.sort((a, b) => b - a);\n  const firstIndex = playerValues.indexOf(first);\n  playerValues.forEach((pVal, i) => {\n    playerValues[i] = pVal - (i === firstIndex ? second : first);\n  });\n  arrPool.end();\n  return playerValues;\n};\n\nexport const getPlayerIndex = (game: Game) => {\n  return game.turn % game.players.length;\n};\n\nexport const isLastTurns = (game: Game) => _.some(game.players, player => player.points >= 15);\n\nexport const isTerminal = (game: Game) => {\n  return isLastTurns(game) && getPlayerIndex(game) === 0;\n};\n\nconst randomPlay = (game: Game) => {\n  actionPool.start();\n  const possibleActions = getPossibleActions(game);\n  const bestAction = possibleActions[Math.floor(Math.random() * possibleActions.length)] || null;\n  actionPool.end();\n  return _.cloneDeep(bestAction);\n};\n\nconst minimaxAB = genMinimaxAB(forSomePossibleActions, takeAction, gameValue, isTerminal, 2);\n\nconst maxn = genMaxN(forSomePossibleActions, takeAction, gameValueForAllPlayers, getPlayerIndex, isTerminal, 4);\n\nconst probablyBestMove = genProbablyBestMove(forSomePossibleActions, takeAction, gameValueForAllPlayers, getPlayerIndex, isTerminal, 4);\n\nexport enum Strategy {\n  Random,\n  AlphaBeta,\n  MaxN,\n  Probablistic,\n}\n\nexport const getStrategy = (strat: Strategy) => {\n  switch (strat) {\n    case (Strategy.Random):\n      return randomPlay;\n    case (Strategy.MaxN):\n      return maxn;\n    case (Strategy.Probablistic):\n      return probablyBestMove;\n    case (Strategy.AlphaBeta):\n    default:\n      return minimaxAB;\n  }\n}\n\nexport const runGame = (numPlayers: number, strat: Strategy = Strategy.Random) => {\n  const game = setupGame(numPlayers);\n  const allActionsTaken: Action[][] = _.times(numPlayers, () => []);\n  const getNextAction = getStrategy(strat);\n  while (!isTerminal(game)) {\n    let numNoActions = 0;\n    _.times(numPlayers, () => {\n      const playerIndex = getPlayerIndex(game);\n      // console.log(`Player ${playerIndex}`);\n      const action = getNextAction(game);\n      // console.log(action);\n      if (!action) {\n        numNoActions++;\n        const player = game.players[playerIndex];\n        console.warn('No action available for player', _.cloneDeep(player), _.cloneDeep(game));\n        game.turn++;\n        return;\n      }\n      allActionsTaken[playerIndex].push(action);\n      takeAction(game, action);\n      numNoActions = 0;\n    });\n    if (numNoActions === numPlayers) {\n      console.error('Infinite Loop', _.cloneDeep(game));\n      break;\n    }\n  }\n  const winningPlayer = _.maxBy(game.players, player => player.points);\n  return [_.map(game.players, 'points').join(',') + ':' + game.turn, ...allActionsTaken[winningPlayer!.id].map(action => JSON.stringify(action))];\n};\n","export const genMinimaxAB = <G, A>(\n  forSomePossibleActions: (node: G, callback: (action: A) => boolean | undefined) => void,\n  takeAction: (node: G, action: A) => G,\n  nodeValue: (node: G) => number,\n  isTerminal: (node: G) => boolean,\n  depth: number) => {\n  const minimaxAB = (node: G, bestAction: A | null = null, currDepth = depth, alpha = -Infinity, beta = Infinity, isMaximizingPlayer = true): [number, A | null] => {\n    if (currDepth === 0 || isTerminal(node)) {\n      const originalTurn = (node as any).turn;\n      (node as any).turn = originalTurn - (depth - currDepth);\n      const currValue = nodeValue(node);\n      (node as any).turn = originalTurn\n      return [currValue, bestAction];\n    }\n\n    let value = isMaximizingPlayer ? -Infinity : Infinity;\n    if (isMaximizingPlayer) {\n      forSomePossibleActions(node, (action) => {\n        const [newValue] = minimaxAB(takeAction(node, action), action, currDepth - 1, alpha, beta, false)\n        // console.log(newValue, action);\n        if (newValue > value) {\n          value = newValue;\n          bestAction = action;\n        }\n        if (value >= beta) return true;\n        alpha = Math.max(alpha, value);\n        return false;\n      });\n    } else {\n      forSomePossibleActions(node, (action) => {\n        const [newValue] = minimaxAB(takeAction(node, action), action, currDepth - 1, alpha, beta, true)\n        if (newValue < value) {\n          value = newValue;\n          bestAction = action;\n        }\n        if (value <= alpha) return true;\n        beta = Math.min(beta, value);\n        return false;\n      });\n    }\n    return [value, bestAction];\n\n  };\n  return (game: G, endDepth = depth) => minimaxAB(game, null, endDepth)[1];\n};\n\nexport const genMaxN = <G, A>(\n  forEachPossibleAction: (node: G, callback: (action: A) => void) => void,\n  takeAction: (node: G, action: A) => G,\n  nodeValue: (node: G) => number[],\n  getPlayerIndex: (node: G) => number,\n  isTerminal: (node: G) => boolean,\n  depth: number) => {\n  const maxn = (node: G, bestAction: A | null = null, currDepth = depth): [number[], A | null] => {\n    if (currDepth === 0 || isTerminal(node)) {\n      return [nodeValue(node), bestAction];\n    }\n    const playerIndex = getPlayerIndex(node);\n    let maxValue = [] as number[];\n    forEachPossibleAction(node, (action) => {\n      const [playerValues] = maxn(takeAction(node, action), action, currDepth - 1);\n      if (!maxValue.length || playerValues[playerIndex] > maxValue[playerIndex]) {\n        maxValue = playerValues;\n        bestAction = action;\n      }\n    });\n    return [maxValue, bestAction];\n\n  };\n  return (game: G, endDepth = depth) => maxn(game, null, endDepth)[1];\n};\n\nexport const genProbablyBestMove = <G, A>(\n  forEachPossibleAction: (node: G, callback: (action: A) => void) => void,\n  takeAction: (node: G, action: A) => G,\n  getPlayerValues: (node: G) => number[],\n  getPlayerIndex: (node: G) => number,\n  isTerminal: (node: G) => boolean,\n  depth: number\n) => {\n  const probablyBestMove = (node: G, bestAction: A | null = null, playerIndex: number = 0, currDepth = depth): [number, A | null] => {\n    if (currDepth === 0 || isTerminal(node)) {\n      return [getPlayerValues(node)[playerIndex], bestAction];\n    }\n    const currentPlayerIndex = getPlayerIndex(node);\n    const values = [] as number[];\n    const opponentValues = [] as number[];\n    let maxValue = -Infinity;\n    forEachPossibleAction(node, (action) => {\n      const nextNode = takeAction(node, action);\n      const nodeValues = getPlayerValues(nextNode);\n      const [value] = probablyBestMove(nextNode, action, playerIndex, currDepth - 1);\n      if (value > maxValue) {\n        maxValue = value;\n        bestAction = action;\n      }\n      values.push(value);\n      opponentValues.push(nodeValues[currentPlayerIndex]);\n    });\n    const opponentSum = opponentValues.reduce((sum, x) => sum + x, 0);\n    return [values.reduce((agg, x, i) => agg + opponentValues[i] * x / opponentSum, 0), bestAction];\n  };\n  return (game: G, endDepth = depth) => {\n    const playerIndex = getPlayerIndex(game);\n    return probablyBestMove(game, null, playerIndex, endDepth)[1];\n  };\n};\n","/* eslint-disable no-restricted-globals */\nimport { Game } from '../models/Splendor';\nimport { getStrategy, Strategy } from '../utils/splendor';\n\nconst getNextAction = getStrategy(Strategy.Probablistic);\n\n\nself.onmessage = (ev: MessageEvent<{ game: Game, depth: number }>) => {\n  self.postMessage({ action: getNextAction(ev.data.game, ev.data.depth), depth: ev.data.depth });\n};\n\nexport { };"],"names":["Color","getCost","white","blue","green","red","black","yellow","arguments","length","undefined","EMPTY_COINS","ALL_CARDS","id","color","White","cost","points","tier","Black","Blue","Green","Red","count","_","coll","countIf","agg","value","keyIndex","c","makePool","createNew","cleanNew","x","pool","numUsedAtDepth","start","push","get","currIndex","console","error","concat","end","pop","arrPool","actionPool","type","coinCost","card","getBuyActions","game","player","output","gatherBuyActions","action","payableCost","Math","max","bought","coinsNeeded","coins","yellowCoinsNeeded","Yellow","canAffordCard","table","forEach","reserved","getPossibleActions","playerIndex","getPlayerIndex","players","lessThanThreeStacks","threeCoinPermutations","onlyCoinsToTake","gatherThreeCoins","currentCoins","nextCoins","generateThreeCoinPermutations","permutation","yellowCost","getReserveActions","forSomePossibleActions","callback","result","some","drawCardFromDeck","removeCard","cardIndex","nextCard","deck","getNullCard","splice","takeCardFromTable","maybeAcquireNoble","firstAffordableNoble","getAffordableNobles","nobles","filter","noble","cards","takeAction","produce","turn","coinsExchange","playerCoins","actionCost","gameCoins","playerValue","min","sumCoins","numCoins","map","toString","padStart","join","gameValueForAllPlayers","playerValues","first","second","sort","a","b","firstIndex","indexOf","pVal","i","isTerminal","isLastTurns","randomPlay","possibleActions","bestAction","floor","random","minimaxAB","genMinimaxAB","nodeValue","depth","node","currDepth","alpha","Infinity","beta","isMaximizingPlayer","originalTurn","currValue","newValue","reduce","maxValue","maxn","genMaxN","forEachPossibleAction","probablyBestMove","genProbablyBestMove","getPlayerValues","currentPlayerIndex","values","opponentValues","nextNode","nodeValues","opponentSum","sum","endDepth","Strategy","getStrategy","strat","Random","MaxN","Probablistic","AlphaBeta","getNextAction","self","onmessage","ev","postMessage","data"],"sourceRoot":""}