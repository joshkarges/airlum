rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthorOrUser(exchangeEventId, auth) {
      let exchangeEvent = get(/databases/$(database)/documents/exchangeEvent/$(exchangeEventId));
      return auth.token.email in exchangeEvent.data.users || auth.uid == exchangeEvent.data.author.uid;
    }

    match /exchangeEvent/{exchangeEventId} {
      allow get: if request.auth != null && (request.auth.token.email in resource.data.users || resource.data.author.uid == request.auth.uid)
      // allow get: if request.auth != null && ((request.auth.token.email in resource.data.users))

      // User can list exchange events if they're auth'd, and they're querying by author.uid, and that author.uid is equal to the user's uid.
      allow list: if request.auth != null && resource.data.author.uid == request.auth.uid
      
      // User can create an exchangeEvent if the author in the created data is equal to the auth'd user
      allow create: if request.auth != null && request.resource.data.author.uid == request.auth.uid
      
      // User can update an exchangeEvent if they're authenticated, the resource exists, the resource has an author field, and that author uid is equal to the auth'd user.
      allow delete, update: if request.auth != null && resource != null && resource.data != null && "author" in resource.data && resource.data.author.uid == request.auth.uid

    }

    match /wishList/{wishListid} {
      allow read: if request.auth != null && isAuthorOrUser(resource.data.exchangeEvent, request.auth)
      allow create: if request.auth != null && isAuthorOrUser(request.resource.data.exchangeEvent, request.auth) && request.resource.data.author.uid == request.auth.uid
      allow update: if request.auth != null && isAuthorOrUser(resource.data.exchangeEvent, request.auth)
      allow delete: if request.auth != null && resource.data.author.uid == request.auth.uid && resource.data.isExtra == true
    }
  }
}